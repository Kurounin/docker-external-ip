# First create our chains if there are not yet there. In reverse order.
for CHAIN in AFTER_EXTERNAL_IP EXTERNAL_IP; do
    if ! iptables --numeric -t nat --list $CHAIN >/dev/null 2>&1; then
        iptables -t nat -N $CHAIN
        iptables -t nat -A $CHAIN -j RETURN
        iptables -t nat -I POSTROUTING -j $CHAIN
    fi
done

# First we remove all existing entries.
for line in $(iptables -w --line-numbers --numeric -t nat --list EXTERNAL_IP | grep SNAT | awk '{print $1}' | tac); do
    iptables -t nat -D EXTERNAL_IP $line
done

dnatRules=$(iptables -w --line-numbers --numeric -v -t nat --list DOCKER | grep DNAT)
activeContainerIps=""
linesToRemove=""

{{ range $index, $container := . }}
    {{ range $index, $network := $container.Networks }}
        {{ if $network.IP }}
            activeContainerIps+=",{{ $network.IP }},"
            
            {{ if $container.Env.SERVER_IP }}
                # Route container's traffic from that external IP 
                iptables -t nat -I EXTERNAL_IP -s {{ $network.IP }} -j SNAT --to-source {{ $container.Env.SERVER_IP }}
                
                # Check for NAT rules that do not allow traffic from same network
                ipLines=$(echo "$dnatRules" | awk '$7!="*" && $10=="{{ $container.Env.SERVER_IP }}" && index($13, ":{{ $network.IP }}:")==3 {print $1}')
                
                if [ -n "$ipLines" ]; then
                    linesToRemove+=$'\n'
                    linesToRemove+=$ipLines
                    
                    # Add rules without traffic restrictions
                    {{ range $index, $address := $container.Addresses }}
                        iptables -t nat -A DOCKER -p {{ $address.Proto }} -m {{ $address.Proto }} -d {{ $container.Env.SERVER_IP }}/32 --dport {{ $address.HostPort }} -j DNAT --to-destination {{ $network.IP }}:{{ $address.Port }}
                    {{ end }}
                fi
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}

# Remove entries that restrict traffic
for line in $(echo "$linesToRemove" | tac); do
    iptables -t nat -D DOCKER $line
done

# Check DNAT rules for stopped container
lines=$(iptables -w --line-numbers --numeric -v -t nat --list DOCKER | grep DNAT | awk -v activeContainerIps=$activeContainerIps 'split($13, dnat, ":")==3 && index(activeContainerIps, "," dnat[2] ",")==0 {print $1}' | tac)

# Remove entries for stopped containers
for line in $lines; do
    iptables -t nat -D DOCKER $line
done