# First create our chains if there are not yet there. In reverse order.
for CHAIN in AFTER_EXTERNAL_IP EXTERNAL_IP; do
    if ! iptables --numeric -t nat --list $CHAIN >/dev/null 2>&1; then
        iptables -t nat -N $CHAIN
        iptables -t nat -A $CHAIN -j RETURN
        iptables -t nat -I POSTROUTING -j $CHAIN
    fi
done

{{ range $externalIP, $containersByExternalIP := groupBy $ "Env.SERVER_IP" }}
    {{ if $externalIP }}
        # First we remove all existing entries.
        for line in $(iptables --line-numbers --numeric -t nat --list EXTERNAL_IP | awk '$7=="to:{{ $externalIP }}" {print $1}' | tac); do
            iptables -t nat -D EXTERNAL_IP $line
        done

        {{ range $index, $container := $containersByExternalIP }}
            # Check for NAT rules that do not allow traffic from same network
            lines=$(iptables --line-numbers --numeric -v -t nat --list DOCKER | awk '$10=="{{ $externalIP }}" && $7!="*" {print $1}' | tac)
            
            if [ -n "$lines" ]; then
                # Remove entries that restrict traffic
                for line in $lines; do
                    iptables -t nat -D DOCKER $line
                done
            fi

            {{ range $index, $network := $container.Networks }}
                if [ -n "$lines" ]; then
                    # Add rules without traffic restrictions
                    {{ range $index, $address := $container.Addresses }}
                        iptables -t nat -A DOCKER -p {{ $address.Proto }} -m {{ $address.Proto }} -d {{ $externalIP }}/32 --dport {{ $address.HostPort }} -j DNAT --to-destination {{ $network.IP }}:{{ $address.Port }}
                    {{ end }}
                fi
                
                # Route container's traffic from that external IP 
                iptables -t nat -I EXTERNAL_IP -s {{ $network.IP }} -j SNAT --to-source {{ $externalIP }}
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}

activeIps=""

# Store used ip address
{{ range $index, $container := . }}
    {{ range $index, $network := $container.Networks }}
        activeIps="${activeIps},{{ $network.IP }},"
    {{ end }}
{{ end }}

lines=$(iptables --line-numbers --numeric -v -t nat --list DOCKER | awk -v activeIps=$activeIps '$4=="DNAT" && split($13, dnat, ":")==3 && index(activeIps, "," dnat[2] ",")==0 {print $1}' | tac)

# Remove entries for stopped containers
for line in $lines; do
    iptables -t nat -D DOCKER $line
done